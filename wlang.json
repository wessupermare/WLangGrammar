{
	"name": "WLang",
	"scopeName": "source.wlang",
	"fileTypes": [
		"w"
	],
	"foldingStartMarker": "(?m)^.*[$",
	"foldingStopMarker": "(?m)^].*$",
	"patterns": [
		{
			"name": "comment.line.question-mark.wlang",
			"begin": "[?]",
			"end": "(?m)$"
		},
		{
			"name": "comment.block.wlang",
			"begin": "{",
			"end": "}"
		},
		{
			"name": "constant.numeric.wlang",
			"match": "[0-9]+"
		},
		{
			"name": "constant.language.boolean.true.wlang",
			"match": "(?i)[^0-9A-Za-z_]True[^0-9A-Za-z_]"
		},
		{
			"name": "constant.language.boolean.false.wlang",
			"match": "(?i)[^0-9A-Za-z_]False[^0-9A-Za-z_]"
		},
		{
			"name": "meta.function.wlang",
			"match": "(?i)(?:(Public)[^0-9A-Za-z_])?(Func)[^0-9A-Za-z_]([a-zA-Z][_a-zA-Z0-9]*)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "storage.type.function.wlang"
				},
				"2": {
					"name": "storage.modifier.access.public.wlang"
				},
				"3": {
					"name": "entity.name.function.wlang"
				}
			}
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(Escape)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "keyword.control.break.wlang"
				}
			}
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(Return)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "keyword.control.return.wlang"
				}
			}
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(If)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "keyword.control.if.wlang"
				}
			}
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(Repeat)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "keyword.control.loop.wlang"
				}
			}
		},
		{
			"match": "(?i)[^0-9A-Za-z_](And|Or|Not)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "keyword.operator.logical.wlang"
				}
			}
		},
		{
			"name": "keyword.operator.bitwise.wlang",
			"match": "(?i)&|||^"
		},
		{
			"name": "keyword.operator.arithmetic.wlang",
			"match": "%|*|/|-|+|\\"
		},
		{
			"name": "keyword.operator.comparison.wlang",
			"match": "="
		},
		{
			"name": "keyword.operator.relational.wlang",
			"match": "[<>]=?"
		},
		{
			"name": "string.quoted.double.wlang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.wlang",
					"match": "\\."
				}
			]
		},
		{
			"name": "string.quoted.single.wlang",
			"begin": "'",
			"end": "'"
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(args)[^0-9A-Za-z_]",
			"captures": {
				"1": {
					"name": "variable.parameter.wlang"
				}
			}
		},
		{
			"name": "variable.language.iterator.wlang",
			"match": "$"
		},
		{
			"name": "variable.language.counter.wlang",
			"match": "#"
		},
		{
			"match": "(?i)(?:^|[^0-9A-Za-z_])(Item)[^0-9A-Za-z_]([a-zA-Z][_a-zA-Z0-9]*)(?:[^0-9A-Za-z_]?(=))?",
			"captures": {
				"1": {
					"name": "storage.type.var.wlang"
				},
				"2": {
					"name": "variable.other.wlang"
				},
				"3": {
					"name": "keyword.operator.assignment.wlang"
				}
			}
		},
		{
			"name": "meta.import.wlang",
			"match": "(?i)^(REF)[^0-9A-Za-z_]['\"][a-zA-Z][_a-zA-Z0-9]*['\"](?:,[^0-9A-Za-z_]['\"][a-zA-Z][_a-zA-Z0-9]*['\"])*(?:[^0-9A-Za-z_](FROM)[^0-9A-Za-z_](['\"][a-zA-Z][_a-zA-Z0-9]*['\"]))?$",
			"captures": {
				"1": {
					"name": "keyword.other.import.wlang"
				},
				"2": {
					"name": "keyword.other.from.wlang"
				},
				"3": {
					"name": "entity.name.type.wlang"
				}
			}
		},
		{
			"name": "meta.projection.wlang",
			"begin": "(<[)",
			"begincaptures": {
				"1": {
					"name": "keyword.other.projection.begin.wlang"
				}
			},
			"end": "(]>)",
			"endcaptures": {
				"1": {
					"name": "keyword.other.projection.end.wlang"
				}
			},
			"patterns": [
				{
					"name": "keyword.operator.project.wlang",
					"match": "=>"
				}
			]
		},
		{
			"match": "(?i)[^0-9A-Za-z_.]([a-zA-Z][_a-zA-Z]*)[(]",
			"captures": {
				"1": {
					"name": "entity.name.function.wlang"
				}
			}
		},
		{
			"match": "(?i)[.]([a-zA-Z][_a-zA-Z]*)[(]",
			"captures": {
				"1": {
					"name": "entity.name.tag.wlang"
				}
			}
		}
	]
}
